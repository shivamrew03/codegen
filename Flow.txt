Server-side Flow:

Database Connection (server/src/config/database.js):

This module establishes a connection to MongoDB using the provided URI from the environment variables.
It's typically called when the server starts up.
Authentication Middleware (server/src/middleware/auth.js):

This middleware checks for a valid JWT token in the request cookies.
It's used to protect routes that require authentication.
If a valid token is found, it adds the userId to the request object.
Error Handling (server/src/utils/errors.js):

Defines custom error classes for different types of errors (e.g., BadRequestError, UnauthorizedError).
These are used throughout the application for consistent error handling.

Auth Controller (server/src/controllers/authController.js):

Handles HTTP requests related to authentication (signup, login, logout).
It uses the AuthService to perform the actual authentication logic.

Auth Service (server/src/services/authService.js):

Contains the business logic for authentication.
Handles user creation, password hashing, and token generation.
Client-side Flow:

API Service (client/src/services/api.js):

Sets up an Axios instance for making API calls.
Configures base URL and credentials handling.
Includes an interceptor for handling unauthorized responses.

Authentication Hook (client/src/hooks/useAuth.js):

Manages the authentication state (user information).
Provides functions for logging in, logging out, and checking authentication status.

Auth Context (client/src/context/AuthContext.jsx):

Creates a React context for sharing authentication state across components.
Uses the useAuth hook to manage the authentication state.

Navbar Component (client/src/components/layout/Navbar.jsx):

Displays different navigation options based on the user's authentication status.
Uses the AuthContext to access user information and logout function.

App Component (client/src/App.jsx):

Sets up the main structure of the application.
Wraps the entire app in the AuthProvider to make authentication state available globally.
Defines routes, including private routes that require authentication.

Overall Flow:

When the application starts:

The server connects to the database.
The React app initializes and checks for existing authentication.
User interactions:

Signup: User submits credentials -> AuthController.signup -> AuthService.signup -> User created in database
Login: User submits credentials -> AuthController.login -> AuthService.login -> JWT token generated and stored in cookie
On successful login, the client updates the auth state, making the user information available throughout the app.
Authenticated requests:

The auth middleware on the server checks for a valid token.
If valid, the request proceeds; if not, an unauthorized error is returned.
Protected routes on the client:

PrivateRoute component checks if a user is authenticated.
If authenticated, it renders the requested component; if not, it redirects to the login page.
Logout:

User clicks logout -> AuthController.logout clears the cookie on the server
Client clears the user state, effectively logging out the user on the frontend